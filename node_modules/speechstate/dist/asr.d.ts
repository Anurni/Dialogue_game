/// <reference types="webspeechapi" />
import { RecogniseParameters, Hypothesis, AzureSpeechCredentials, AzureLanguageCredentials } from "./types";
interface MySpeechRecognition extends SpeechRecognition {
    new (): any;
}
interface MySpeechGrammarList extends SpeechGrammarList {
    new (): any;
}
type ASREvent = {
    type: "READY";
    value: {
        wsaASR: MySpeechRecognition;
        wsaGrammarList: MySpeechGrammarList;
    };
} | {
    type: "ERROR";
} | {
    type: "NOINPUT";
} | {
    type: "CONTROL";
} | {
    type: "START";
    value?: RecogniseParameters;
} | {
    type: "STARTED";
    value: {
        wsaASRinstance: MySpeechRecognition;
    };
} | {
    type: "STARTSPEECH";
} | {
    type: "RECOGNISED";
} | {
    type: "RESULT";
    value: Hypothesis[];
};
interface ASRContext extends ASRInit {
    azureAuthorizationToken?: string;
    wsaASR?: MySpeechRecognition;
    wsaASRinstance?: MySpeechRecognition;
    wsaGrammarList?: MySpeechGrammarList;
    result?: Hypothesis[];
    nluResult?: any;
    params?: RecogniseParameters;
}
interface ASRInit {
    asrDefaultCompleteTimeout: number;
    asrDefaultNoInputTimeout: number;
    locale: string;
    audioContext: AudioContext;
    azureCredentials: string | AzureSpeechCredentials;
    speechRecognitionEndpointId?: string;
    azureLanguageCredentials?: AzureLanguageCredentials;
}
export declare const asrMachine: import("xstate").StateMachine<ASRContext, ASREvent, {
    [x: string]: import("xstate").ActorRef<import("xstate").CallbackSnapshot<{}>, import("xstate").EventObject> | import("xstate").ActorRef<import("xstate").PromiseSnapshot<string, any>, {
        [k: string]: unknown;
        type: string;
    }> | import("xstate").ActorRef<import("xstate").CallbackSnapshot<any>, import("xstate").EventObject> | import("xstate").ActorRef<import("xstate").PromiseSnapshot<any, AzureLanguageCredentials & {
        query: string;
    }>, {
        [k: string]: unknown;
        type: string;
    }>;
}, {
    src: "getToken";
    logic: import("xstate").PromiseActorLogic<string, any>;
    id: string;
} | {
    src: "ponyfill";
    logic: import("xstate").CallbackActorLogic<import("xstate").EventObject, {}>;
    id: string;
} | {
    src: "recStart";
    logic: import("xstate").CallbackActorLogic<import("xstate").EventObject, any>;
    id: string;
} | {
    src: "nluPromise";
    logic: import("xstate").PromiseActorLogic<any, AzureLanguageCredentials & {
        query: string;
    }>;
    id: string;
}, {
    type: "recStop";
    params: unknown;
}, {
    type: string;
    params: {};
}, string, "GetToken" | "Ready" | "Fail" | "Ponyfill" | "Pause" | {
    Recognising?: "WaitForRecogniser" | "NoInput" | "InProgress" | "Match" | "NLURequest";
}, string, ASRInit, {}, import("xstate").ResolveTypegenMeta<import("xstate").TypegenDisabled, ASREvent, {
    src: "getToken";
    logic: import("xstate").PromiseActorLogic<string, any>;
    id: string;
} | {
    src: "ponyfill";
    logic: import("xstate").CallbackActorLogic<import("xstate").EventObject, {}>;
    id: string;
} | {
    src: "recStart";
    logic: import("xstate").CallbackActorLogic<import("xstate").EventObject, any>;
    id: string;
} | {
    src: "nluPromise";
    logic: import("xstate").PromiseActorLogic<any, AzureLanguageCredentials & {
        query: string;
    }>;
    id: string;
}, {
    type: "recStop";
    params: unknown;
}, {
    type: string;
    params: {};
}, string, string>>;
export {};
//# sourceMappingURL=asr.d.ts.map